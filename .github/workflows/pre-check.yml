name: PR Check and Snapshot

on: # When this action should be launched
  pull_request:
    branches:
      - main # Target branch of the PR
    types: [opened, synchronize, reopened]

permissions:
  contents: write # Authorized to modify files
  pull-requests: write # Authorized to create/modify/close/merge Pull Requests

jobs:
  build:
    runs-on: ubuntu-latest
    # Exclude Release Pull Requests (if branch starts with "release/" and label of the PR is "release" or "automated")
    if: |
      !contains(github.head_ref, 'release/') &&
      !contains(github.event.pull_request.labels.*.name, 'release') &&
      !contains(github.event.pull_request.labels.*.name, 'automated')
    steps:
      - uses: actions/checkout@v4 # Clone the repository in the runner
        with:
          ref: ${{ github.head_ref }} # Refers to the source branch -> The checkout is done on the PR branch
          fetch-depth: 0 # The runner retrieves all the branches and tags -> Enables to have all the existing tags to calculate snapshots and releases

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: make lint

      - name: Generate GitHub App token # Temporary token which has the required permissions
        id: get_app_token # To use outputs of this step in the following steps
        uses: tibdex/github-app-token@v2 # Used to generate the App's token with its app_id and its private_key
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Determine snapshot version
        id: snapshot_version
        run: |
          git fetch --tags
          last_tag=$(git tag --list "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$last_tag" ]; then
            last_tag="v0.0.0"
          fi
          last_tag=${last_tag#v}

          echo "Last tag: $last_tag"

          IFS='.' read -r major minor patch <<< "$last_tag"
          snapshot_version="$major.$minor.$patch-snapshot-${{ github.event.number }}"

          echo "Snapshot version: $snapshot_version"
          echo "snapshot_version=$snapshot_version" >> $GITHUB_OUTPUT

      - name: Set Git identity
        run: |
          git config user.name "github-app[bot]"
          git config user.email "github-app[bot]@users.noreply.github.com"

      - name: Update version in PR
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: |
          current_version=$(grep -o "version='[^']*'" setup.py | sed "s/version='\\([^']*\\)'/\\1/")
          target_version="${{ steps.snapshot_version.outputs.snapshot_version }}"

          echo "Current version: $current_version"
          echo "Target version: $target_version"

          if [ "$current_version" != "$target_version" ]; then
            sed -i "s/version='[^']*'/version='$target_version'/" setup.py
            git add setup.py
            git commit -m "Update version to $target_version [skip ci]"
            git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/${{ github.repository }} HEAD:${{ github.head_ref }}
          fi

      - name: Create snapshot tag aligned with PR branch
        run: |
          snapshot_tag="v${{ steps.snapshot_version.outputs.snapshot_version }}"

          echo "Snapshot tag: $snapshot_tag"

          # Checkout PR branch (feature source)
          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}

          # Create and push tag if it doesn't exist
          if ! git tag -l "$snapshot_tag" | grep -q "$snapshot_tag"; then
            git tag "$snapshot_tag"
            git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/${{ github.repository }} "$snapshot_tag"
            echo "Created tag $snapshot_tag on PR branch"
          else
            echo "Tag $snapshot_tag already exists"
          fi
