name: Build and Update SoccerViz

on:
  push:
    branches:
      - "feature/*"    # Build classique sur feature
      - "main"         # Build automatique après merge
  pull_request:
    branches:
      - "main"         # PR vers main → snapshot
  workflow_dispatch:   # Main manuel → patch update

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: make lint

  update_version:
    needs: build
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine new version
        run: |
          # Retrieve the last release tag (ignore snapshots)
          last_tag=$(git tag --list "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          last_tag=${last_tag:-v0.0.0}
          last_tag=${last_tag#v}
          echo "Current version: $last_tag"
          IFS='.' read -r major minor patch <<< "$last_tag"

          # Determine the new version
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # Main manuel : incrément patch
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          else
            # PR : snapshot basé sur le dernier tag release
            new_version="$major.$minor.$patch-snapshot"
          fi

          tag_version="v$new_version"
          echo "New version: $new_version"
          echo "Tag version: $tag_version"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            # Update setup.py
            sed -i "s/version='[^']*'/version='$new_version'/" setup.py
            git add setup.py
            git commit -m "Update version to $new_version" || echo "No changes to commit"

            # Push on the PR's source branch
            branch_name="$GITHUB_HEAD_REF"
            git fetch origin "$branch_name"
            git rebase origin/"$branch_name" || echo "Rebase failed, continuing"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:"$branch_name"
          else
            echo "Main branch protected or workflow dispatch → skip commit push"
          fi

          # Delete the old snapshot tag if it already exists
          if [[ "${new_version}" == *"-snapshot" ]]; then
            if git rev-parse "$tag_version" >/dev/null 2>&1; then
              echo "Snapshot tag ${new_version} already exists: recreating it..."
              git tag -d "$tag_version"
              git push --delete origin "$tag_version"
            fi
          fi

          # Create the tag
          git tag -f "$tag_version"

          git push --tags
